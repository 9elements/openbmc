From 8f6ed5567a363e834540613f4570f1af6231b6fb Mon Sep 17 00:00:00 2001
From: Patrick Rudolph <patrick.rudolph@9elements.com>
Date: Fri, 13 Oct 2023 12:40:14 +0200
Subject: [PATCH 2/2] pid/fancontroller: Set failsafe PWM in destructor

When the FanController object is being destroyed it can no longer
regulate the fans. To prevent system failure set all fans to the
FailSafePercent defined in the configuration.

As this new feature is also being used when the config is being reloaded
and might cause audible noise the new feature is guarded by mesons
option 'offline-failsafe-pwm'.

Signed-off-by: Patrick Rudolph <patrick.rudolph@9elements.com>
---
 meson.build           |  1 +
 meson.options         |  1 +
 pid/fancontroller.cpp | 31 +++++++++++++++++++++++++++++++
 pid/fancontroller.hpp |  2 +-
 4 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index 943cd37..23416f8 100644
--- a/meson.build
+++ b/meson.build
@@ -17,6 +17,7 @@ bindir = get_option('prefix') / get_option('bindir')
 conf_data.set('BINDIR', bindir)
 conf_data.set('SYSTEMD_TARGET', get_option('systemd_target'))
 conf_data.set('STRICT_FAILSAFE_PWM', get_option('strict-failsafe-pwm'))
+conf_data.set('OFFLINE_FAILSAFE_PWM', get_option('offline-failsafe-pwm'))
 
 configure_file(output: 'config.h',
     configuration: conf_data
diff --git a/meson.options b/meson.options
index 9205b1b..fc65cdb 100644
--- a/meson.options
+++ b/meson.options
@@ -1,4 +1,5 @@
 option('tests', type: 'feature', value: 'enabled', description: 'Build tests')
 option('oe-sdk', type: 'feature', value: 'disabled', description: 'Enable OE SDK')
 option('strict-failsafe-pwm', type: 'boolean', value: false, description: 'Set the fans strictly at the failsafe PWM when in failsafe mode')
+option('offline-failsafe-pwm', type: 'boolean', value: false, description: 'Set the fans at the failsafe PWM when reloading or terminated.')
 option('systemd_target', type: 'string', value: 'multi-user.target', description: 'Target for starting this service')
diff --git a/pid/fancontroller.cpp b/pid/fancontroller.cpp
index 44852a0..5acda91 100644
--- a/pid/fancontroller.cpp
+++ b/pid/fancontroller.cpp
@@ -188,4 +188,35 @@ void FanController::outputProc(double value)
     return;
 }
 
+FanController::~FanController()
+{
+    double percent = _owner->getFailSafePercent();
+    if (debugEnabled)
+    {
+        std::cerr << "Zone " << _owner->getZoneID()
+                  << " offline fans output pwm: " << percent << "\n";
+    }
+#ifdef OFFLINE_FAILSAFE_PWM
+#error OFFLINE_FAILSAFE_PWM is defined
+#endif
+
+    // value and kFanFailSafeDutyCycle are 10 for 10% so let's fix that.
+    percent /= 100.0;
+
+    // PidSensorMap for writing.
+    for (const auto& it : _inputs)
+    {
+        auto sensor = _owner->getSensor(it);
+        auto redundantWrite = _owner->getRedundantWrite();
+        int64_t rawWritten;
+        sensor->write(percent, redundantWrite, &rawWritten);
+
+        // The outputCache will be used later,
+        // to store a record of the PWM commanded,
+        // so that this information can be included during logging.
+        auto unscaledWritten = static_cast<double>(rawWritten);
+        _owner->setOutputCache(sensor->getName(), {percent, unscaledWritten});
+    }
+}
+
 } // namespace pid_control
diff --git a/pid/fancontroller.hpp b/pid/fancontroller.hpp
index 89b3d5e..a1cbc3f 100644
--- a/pid/fancontroller.hpp
+++ b/pid/fancontroller.hpp
@@ -29,7 +29,7 @@ class FanController : public PIDController
         PIDController(id, owner),
         _inputs(inputs), _direction(FanSpeedDirection::NEUTRAL)
     {}
-
+    ~FanController();
     double inputProc(void) override;
     double setptProc(void) override;
     void outputProc(double value) override;
-- 
2.41.0

